{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e8d0d5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Guess a letter: a\n",
      "Good guess! 'a' is in the word.\n",
      "Word to guess: _ _ _ a _ _ _ _ _ _\n",
      "Number of lives: 5\n",
      "List of guesses: ['a']\n",
      "Number of unique letters left to guess: 7\n",
      "Guess a letter: b\n",
      "Good guess! 'b' is in the word.\n",
      "Word to guess: _ _ _ a _ b _ _ _ _\n",
      "Number of lives: 5\n",
      "List of guesses: ['a', 'b']\n",
      "Number of unique letters left to guess: 6\n",
      "Guess a letter: c\n",
      "Sorry, 'c' is not in the word.\n",
      "You have 4 lives left.\n",
      "Word to guess: _ _ _ a _ b _ _ _ _\n",
      "Number of lives: 4\n",
      "List of guesses: ['a', 'b', 'c']\n",
      "Number of unique letters left to guess: 6\n",
      "Guess a letter: a\n",
      "You already tried that letter!\n",
      "Guess a letter: l\n",
      "Sorry, 'l' is not in the word.\n",
      "You have 3 lives left.\n",
      "Word to guess: _ _ _ a _ b _ _ _ _\n",
      "Number of lives: 3\n",
      "List of guesses: ['a', 'b', 'c', 'l']\n",
      "Number of unique letters left to guess: 6\n",
      "Guess a letter: \n",
      "Invalid letter. Please, enter a single alphabetical character.\n",
      "Guess a letter: t\n",
      "Good guess! 't' is in the word.\n",
      "Word to guess: _ t _ a _ b _ _ _ _\n",
      "Number of lives: 3\n",
      "List of guesses: ['a', 'b', 'c', 'l', 't']\n",
      "Number of unique letters left to guess: 5\n",
      "Guess a letter: n\n",
      "Sorry, 'n' is not in the word.\n",
      "You have 2 lives left.\n",
      "Word to guess: _ t _ a _ b _ _ _ _\n",
      "Number of lives: 2\n",
      "List of guesses: ['a', 'b', 'c', 'l', 't', 'n']\n",
      "Number of unique letters left to guess: 5\n",
      "Guess a letter: g\n",
      "Sorry, 'g' is not in the word.\n",
      "You have 1 lives left.\n",
      "Word to guess: _ t _ a _ b _ _ _ _\n",
      "Number of lives: 1\n",
      "List of guesses: ['a', 'b', 'c', 'l', 't', 'n', 'g']\n",
      "Number of unique letters left to guess: 5\n",
      "Guess a letter: d\n",
      "Sorry, 'd' is not in the word.\n",
      "You have 0 lives left.\n",
      "Game over! The word was: strawberry\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "class Hangman:\n",
    "    def __init__(self, word_list, num_lives=5):\n",
    "        self.word_list = word_list\n",
    "        self.num_lives = num_lives\n",
    "        self.word = random.choice(word_list)\n",
    "        self.word_guessed = ['_' for _ in self.word]\n",
    "        self.num_letters = len(set(self.word))\n",
    "        self.list_of_guesses = []\n",
    "\n",
    "    def check_guess(self, guess):\n",
    "        guess = guess.lower()\n",
    "\n",
    "        if guess in self.word:\n",
    "            print(f\"Good guess! '{guess}' is in the word.\")\n",
    "            for i in range(len(self.word)):\n",
    "                if self.word[i] == guess:\n",
    "                    self.word_guessed[i] = guess\n",
    "            self.num_letters -= 1\n",
    "        else:\n",
    "            print(f\"Sorry, '{guess}' is not in the word.\")\n",
    "            self.num_lives -= 1\n",
    "            print(f\"You have {self.num_lives} lives left.\")\n",
    "        self.list_of_guesses.append(guess)\n",
    "\n",
    "    def ask_for_input(self):\n",
    "        while True:\n",
    "            guess = input(\"Guess a letter: \")\n",
    "            if not guess.isalpha() or len(guess) != 1:\n",
    "                print(\"Invalid letter. Please, enter a single alphabetical character.\")\n",
    "            elif guess in self.list_of_guesses:\n",
    "                print(\"You already tried that letter!\")\n",
    "            else:\n",
    "                self.check_guess(guess)\n",
    "                if self.num_letters == 0:\n",
    "                    print(f\"Congratulations! You guessed the word: {''.join(self.word_guessed)}\")\n",
    "                    break\n",
    "                elif self.num_lives == 0:\n",
    "                    print(f\"Game over! The word was: {self.word}\")\n",
    "                    break\n",
    "                else:\n",
    "                    print(f\"Word to guess: {' '.join(self.word_guessed)}\")\n",
    "                    print(f\"Number of lives: {self.num_lives}\")\n",
    "                    print(f\"List of guesses: {self.list_of_guesses}\")\n",
    "                    print(f\"Number of unique letters left to guess: {self.num_letters}\")\n",
    "\n",
    "word_list = [\"apple\", \"banana\", \"cherry\", \"strawberry\", \"mango\"]\n",
    "hangman_game = Hangman(word_list)\n",
    "hangman_game.ask_for_input()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
