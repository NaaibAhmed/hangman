{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcfca0db",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "class Hangman:\n",
    "    def __init__(self, word_list, num_lives=5):\n",
    "        self.word_list = word_list\n",
    "        self.num_lives = num_lives\n",
    "        self.word = random.choice(word_list)\n",
    "        self.word_guessed = ['_' for _ in self.word]\n",
    "        self.num_letters = len(set(self.word))\n",
    "        self.list_of_guesses = []\n",
    "\n",
    "    def check_guess(self, guess):\n",
    "        guess = guess.lower()\n",
    "\n",
    "        if guess in self.word:\n",
    "            print(f\"Good guess! '{guess}' is in the word.\")\n",
    "            for i in range(len(self.word)):\n",
    "                if self.word[i] == guess:\n",
    "                    self.word_guessed[i] = guess\n",
    "            self.num_letters -= 1\n",
    "        else:\n",
    "            print(f\"Sorry, '{guess}' is not in the word.\")\n",
    "            self.num_lives -= 1\n",
    "            print(f\"You have {self.num_lives} lives left.\")\n",
    "        self.list_of_guesses.append(guess)\n",
    "\n",
    "    def ask_for_input(self):\n",
    "        while True:\n",
    "            guess = input(\"Guess a letter: \")\n",
    "            if not guess.isalpha() or len(guess) != 1:\n",
    "                print(\"Invalid letter. Please, enter a single alphabetical character.\")\n",
    "            elif guess in self.list_of_guesses:\n",
    "                print(\"You already tried that letter!\")\n",
    "            else:\n",
    "                self.check_guess(guess)\n",
    "                if self.num_letters == 0:\n",
    "                    print(f\"Congratulations! You guessed the word: {''.join(self.word_guessed)}\")\n",
    "                    break\n",
    "                elif self.num_lives == 0:\n",
    "                    print(f\"Game over! The word was: {self.word}\")\n",
    "                    break\n",
    "                else:\n",
    "                    print(f\"Word to guess: {' '.join(self.word_guessed)}\")\n",
    "                    print(f\"Number of lives: {self.num_lives}\")\n",
    "                    print(f\"List of guesses: {self.list_of_guesses}\")\n",
    "                    print(f\"Number of unique letters left to guess: {self.num_letters}\")\n",
    "\n",
    "def play_game(word_list):\n",
    "    num_lives = 5\n",
    "    game = Hangman(word_list, num_lives)\n",
    "    \n",
    "    while True:\n",
    "        if game.num_lives == 0:\n",
    "            print('You lost!')\n",
    "            break\n",
    "        elif game.num_letters > 0:\n",
    "            game.ask_for_input()\n",
    "        else:\n",
    "            print('Congratulations. You won the game!')\n",
    "            break\n",
    "\n",
    "word_list = [\"apple\", \"banana\", \"cherry\", \"strawberry\", \"mango\"]\n",
    "play_game(word_list)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
